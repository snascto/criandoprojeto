#!/bin/bash

# ===============================================================
# SCRIPT: CRIADOR DE ESTRUTURA DE PROJETO PADR√ÉO + GITHUB
# ===============================================================
# Autor: Santo Nascimento
# Revisado: jul/2025
# Licen√ßa: MIT
# ===============================================================

clear
echo "=============================================="
echo "      üîß CRIADOR DE PROJETOS - GITHUB CLI"
echo "=============================================="

# === 1. INFORMA√á√ïES DO PROJETO ===
read -p "üì¶ Nome do projeto (slug, sem espa√ßos): " PROJECT_NAME
read -p "üìù Descri√ß√£o do projeto: " PROJECT_DESC
read -p "üîì Visibilidade do reposit√≥rio [public/private]: " REPO_VISIBILITY

# Diret√≥rio onde o projeto ser√° criado
BASE_DIR=$(pwd)/"$PROJECT_NAME"
mkdir -p "$BASE_DIR"

# === 2. ESTRUTURA PADR√ÉO ===
declare -a DEFAULT_FOLDERS=("docs" "src")
declare -a DEFAULT_FILES=("README.md" "LICENSE" "CONTACT.md")

echo "üöß Criando estrutura padr√£o..."
for file in "${DEFAULT_FILES[@]}"; do
    touch "$BASE_DIR/$file"
done

for folder in "${DEFAULT_FOLDERS[@]}"; do
    mkdir -p "$BASE_DIR/$folder"
done

echo "# $PROJECT_NAME" > "$BASE_DIR/README.md"
echo "üìß Contato do projeto." > "$BASE_DIR/CONTACT.md"

# === 3. OP√á√ÉO DE SUBPASTAS DENTRO DAS PADR√ïES ===
for folder in "${DEFAULT_FOLDERS[@]}"; do
    read -p "‚ûï Deseja subpastas dentro de '$folder'? [s/n]: " SUB_OK
    if [[ "$SUB_OK" == "s" ]]; then
        read -p "   ‚úçÔ∏è Subpastas (separadas por espa√ßo): " -a SUBLIST
        for sub in "${SUBLIST[@]}"; do
            mkdir -p "$BASE_DIR/$folder/$sub"
            touch "$BASE_DIR/$folder/$sub/.gitkeep"
        done
    fi
done

# === 4. ESCOLHA DE LICEN√áA ===
echo ""
echo "üìÑ Selecione a licen√ßa:"
echo "1 - MIT"
echo "2 - Apache 2.0"
echo "3 - GNU GPL v3"
echo "4 - Nenhuma"
read -p "Escolha [1-4]: " LICENSE_CHOICE

LICENSE_FILE="$BASE_DIR/LICENSE"
YEAR=$(date +%Y)
AUTHOR=$(git config user.name || echo "Autor Desconhecido")

case "$LICENSE_CHOICE" in
  1)
    echo "Selecionado: MIT"
    cat > "$LICENSE_FILE" <<EOF
MIT License

Copyright (c) $YEAR $AUTHOR

Permission is hereby granted, free of charge, to any person obtaining a copy...
[Conte√∫do completo da licen√ßa MIT]
EOF
    ;;
  2)
    echo "Selecionado: Apache 2.0"
    cat > "$LICENSE_FILE" <<EOF
Apache License
Version 2.0, January 2004
http://www.apache.org/licenses/
[Conte√∫do completo da licen√ßa Apache 2.0]
EOF
    ;;
  3)
    echo "Selecionado: GPL v3"
    cat > "$LICENSE_FILE" <<EOF
GNU GENERAL PUBLIC LICENSE
Version 3, 29 June 2007
[Conte√∫do completo da licen√ßa GPL]
EOF
    ;;
  *)
    echo "Nenhuma licen√ßa adicionada."
    ;;
esac

# === 5. CRIAR PASTAS PERSONALIZADAS (EXTRAS) ===
while true; do
    read -p "‚ûï Deseja adicionar mais pastas personalizadas? [s/n]: " ADD_MORE
    [[ "$ADD_MORE" != "s" ]] && break

    read -p "   üìÅ Nome da nova pasta: " NEW_FOLDER
    mkdir -p "$BASE_DIR/$NEW_FOLDER"
    touch "$BASE_DIR/$NEW_FOLDER/.gitkeep"

    read -p "   ‚ûï Deseja subpastas para $NEW_FOLDER? [s/n]: " SUB_ANSWER
    if [[ "$SUB_ANSWER" == "s" ]]; then
        read -p "   ‚úçÔ∏è Subpastas (separadas por espa√ßo): " -a SUBFOLDERS
        for sub in "${SUBFOLDERS[@]}"; do
            mkdir -p "$BASE_DIR/$NEW_FOLDER/$sub"
            touch "$BASE_DIR/$NEW_FOLDER/$sub/.gitkeep"
        done
    fi
done

# === 6. INICIALIZA√á√ÉO GIT ===
echo "üîß Inicializando Git local..."
cd "$BASE_DIR" || exit 1
git init
git add .
git commit -m "üéâ Estrutura inicial do projeto"

# === 7. VERIFICA√á√ÉO GH CLI ===
echo "üîê Verificando autentica√ß√£o com GitHub CLI..."
if ! gh auth status &>/dev/null; then
    echo "‚ùå Voc√™ precisa autenticar com o GitHub CLI antes de continuar."
    echo "Execute: gh auth login"
    exit 1
fi

# === 8. CRIA√á√ÉO DO REPOSIT√ìRIO REMOTO ===
echo "üåê Criando reposit√≥rio remoto com gh CLI..."
gh repo create "$PROJECT_NAME" \
    --"$REPO_VISIBILITY" \
    --description "$PROJECT_DESC" \
    --source . \
    --remote origin \
    --push

# === 9. CONCLUS√ÉO ===
REPO_USER=$(gh api user --jq '.login')
echo ""
echo "‚úÖ Projeto criado e publicado com sucesso!"
echo "üîó Link: https://github.com/${REPO_USER}/${PROJECT_NAME}"
echo "üìÅ Diret√≥rio: $BASE_DIR"
